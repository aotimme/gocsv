Test files for the SQL subcommand.

 - files prefixed with "fs: " will be written to a tempdir;
   they will be stripped out of test/want pairs (but preserved
   in tempdir)
 - a test/want pair consists of a test file (interpreted as
   a JSON array of strings) and a want file

The want files can have any number of blank lines at the
bottom, as they should be normalized; the convention is two
blank lines to denote the end of a test.

-- fs: employee.csv --
ID, Name,    Salary, Dept_ID
 1, Alice,    70000,       2
 2, Bolade,   68000,       3
 3, Charly,   66000,       2
 4, Dinya,    80000,       1
 5, Eiko,     85000,       1
 6, Frida,    65000,       2
 7, Gunter,   65000,       2

-- fs: department.csv --
ID, Dept
 1, DevOps
 2, Engineering
 3, Finance


-- query_sum --
["-q=SELECT SUM(Salary) AS Total FROM employee", "employee.csv"]

-- want --
Total
499000


-- query_where --
["-q=SELECT ID,Name,Salary FROM employee WHERE Salary >= 80000", "employee.csv"]

-- want --
ID, Name,  Salary
 4, Dinya,  80000
 5, Eiko,   85000


-- file_join --
["-f=join.sql", "department.csv", "employee.csv"]

-- fs: join.sql --
SELECT
    Name,Dept
FROM
    employee
    INNER JOIN department ON employee.DEPT_ID = department.ID

-- want --
Name,    Dept
Alice,   Engineering
Bolade,  Finance
Charly,  Engineering
Dinya,   DevOps
Eiko,    DevOps
Frida,   Engineering
Gunter,  Engineering


-- file_count --
["-f=count.sql", "department.csv", "employee.csv"]

-- fs: count.sql --
SELECT
    Dept AS DeptName,
    COUNT(*) AS EmployeeCount
FROM
    employee
    INNER JOIN department on employee.DEPT_ID = department.ID
GROUP BY
    DeptName
ORDER BY
    DeptName ASC

-- want --
DeptName,    EmployeeCount
DevOps,                  2
Engineering,             4
Finance,                 1
